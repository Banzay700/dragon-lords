- типи даних в js ?
8 типів: string,  number, bigInt, boolean, symbol, object, null, undefined.
якщо зробити typeof null то буде об'єкт

- різниця між == і === ?
== порівнює значення
=== додатково порівнює їх типи

- що таке Strict mode ?
строгий режим синтаксису

- function declaration vs function expression ?
function declaration - звичайна ф-ція, створюється інтерпретатором до виконання коду, тому її можна викликати до того як написана ф-ція
function expression - ф-ція яка знаходиться у змінній

- різниця між null і undefined ?
у обох відсутні дані, але у undefined представляє собою значення для змінної якій ше не було
присвоєно ніякого іншого значення, тобто вона є неоприділеною, ф-ція яка нічого не повертає,
і неіснуючого параметру об'єкта.
у null ми самостійно оприділяємо відсутність даних.

- типи таймерів ?
setTimeout,
setInterval(викликає ф-цію постійно через заданий проміжок часу до тих пір поки сторінка відкрита)

- що таке підняття Hoisting ?
це механізм підняття змінної або функції в глобальну або функціональну область видимості.

- що таке область видимості (Scope) ?
це місце звідки ми маємо доступ до змінних або ф-цій

- різниця між let, const, var ?
якщо звернутись до елементу до його ініціалізації, var поверне undefined, let і const покаже помилки
у let і const область видимості обмежена блоком, var це ігнорує
const не можна переоприділити.

- що таке замикання (Closure) ?
при створенні ф-ції і використання в ній змінних, ці змінні доступні локально всередині ф-ції
ззовні не можна получити до них доступ, на зберігання таких змінних чи аргументів виділяється
пам'ять, коли ф-ція закінчує своє виконання ця пам'ять очищується, таким чином ці змінні
більше нігде не існують. Якщо всередені однієї ф-ції створити іншу, то вкладена ф-ція
получше доступ до змінних які були оголошені у зовнішній ф-ції.

- що означає this ?
силка на значення об'єкту який виконує або викликає ф-цію. this може мінятися в залежності
від контексту виконання, із-за такої неоприділеності періодично викликає така проблема
як втрата ф-ції і для того щоб її виправити можна використати call,apply або bind

- різниця між .call(), .apply() і bind() ?
showName.call(user, 'firstName', 'lastName')
showName.apply(user,['firstName', 'lastName'])
const newShowName = showName.bind(user, 'firstName', 'lastName')
newShowName()

- що таке ф-ції вищого порядку ?
це ф-ції які повертають інші ф-ції, або приймають іншу ф-цію в якості аргументу
map,filter,reduce,forEach

- як перетворити любий тип даних в булевий ?
у ф-цію Boolean() передаємо дані і на виході отримуємо булеве значення
або використати !!

- Перечисліть хибні значення в js ?
'', 0, null, undefined, NaN, false

- методи стрічок в js ?
.length, .charAt(1), .toUpperCase(), .toLowerCase(), .indexOf('...'), .lastIndexOf('...')
.slice( , ) .substr( , ) .replace('...', '...') .trim()

- методи масивів ?
.length, push, pop, unshift, shift, concat, splice, toString, join

- що таке чиста ф-ція ?
це ф-ція у якій нема побічних ефектів(видозмінення вхідних, параметрів, http і dom запити, вивід на екран),
кожен раз вона виконує одинаковий результат
коли викликається з тим же набором аргументів,

- різниця між .forEach() і .map() ?
Вони обидва не змінюють масив з яким працюють
forEach перебираючи масив нічого не повертає, тому потрібно створити масив і зупушити в нього
map перебираючи масив формує і повертає новий масив який можна присвоїти у змінну

- як оприділити наявність властивості в об'єкті ?
hasOwnProperty, in, index notation

- що таке IIFE ?
Immediately invoked function expression, анонімна самовизивна ф-ція
щоб не засмічувався глобальний простір імен

- що таке псевдомасив arguments ?
це колекція аргументів які передаються у ф-цію
щоб перетворити колекцію у масив const args= [...arguments]

- різниця між host-об'єктами і нативними об'єктами ?

 host-об'єкти це об'єкти які представляються середовищем виконання тобто браузером
 window,document,location,history,getElementsByTagName,SetTimeout
 нативні це об'єкти що являються частиною js
 (String,Math,RegExp,Object,Function)

- чому результат порівняння 2-х об'єктів = false ?
об'єкти порівнюються по силці чи адресу в пам'яті

- що таке прототипне наслідування ? як створити об'єкт без прототипу ?
всі об'єкти в js мають властивість prototype який є посиланням на інший об'єкт,
коли до властивості об'єкту йде звертання і якщо властивість не знаходиться в поточному
об'єкті, то механізм js переглядаю прототип об'єкту і шукаю цю властивість там, після -
він йде в прототип прототипу і так дальше поки не знайде цю властивість
в одному із прототипів або не досягне кінця ланцюжка прототипів.
Створити об'єкт без прототипу можна через Object.create(null)

- чому розширення нативних js об'єктів це погана практика ?
js використовує механізм прототипного успадкування, а це означає якщо
властивість чи метод не найдений в поточному об'єкті, то пошук буде йти дальше
по ланцюжку прототипів, розширення нативного об'єкту означає добавлення нових властивостей
його прототипу. негативні наслідки може бути декілька : розширив версію прототипу ваша кастомна
властивість може вступити у конфлікт із добавленим, при використанні інших бібліотек в яких
вже реалізована ця властивість. Єдини варіант розширення js об'єктів це створення поліфілу
для старих браузерів

- що таке NaN ? Як оприділити що значення = NaN ?
Not a Number, воно получається коли математична ф-ція спрацювала неправильно.
Щоб оприділити що значення = NaN потрібно використати ф-цію isNaN() яка повертає
булеве значення

- як в js створити об'єкт ?
1)коли змінній присвоюємо об'єкт
2)ф-ція конструктор
3)Object.create(прототип) - створює новий об'єкт з указаним прототипом

- для чого використовується ключове слово new ?
new робить 4 речі :
1)створює пустий об'єкт
2)прив'язує до створеного об'єкту значення this
3)ф-ція установлює внутрішню недоступну властивість цього нового об'єкту
prototype як зовнішній доступний об'єкт прототип ф-ції конструктора
4)повертає значення this.
результатом виконання получаємо новий об'єкт, або екземпляр класу

- оператори && і || ?
&& - він находить і повертає перше хибне значення, або останній операнд коли всі значення істинні
|| - він находить перше істинне значення

- для чого використовується оператор !!  ?
використовується для приведення значення яке справа від нього до логічного типу
(true, false)

- для чого використовується % ?
щоб дістати остачу від ділення двох чисел

- як працює boxing/unboxing ?
упаковка із типу в значення, і розпаковка із значення до типу

- for in / for of
for in - оперує з індексами
for of - оперує зі значеннями

- що таке мемоізація ?
це прийом створення ф-ції здібну запам'ятати раніше вичеслене значення і результат.
при повторному виклику ф-ції з одинаковими аргументами вона не буде виконана а результат
робити повернеться із кешу
